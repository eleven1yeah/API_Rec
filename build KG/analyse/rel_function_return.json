{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': ''}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])", '.writePlist': '', '.shellQuote': 'BinOp(left=Constant(value="\'%s\'"), op=Mod(), right=Call(func=Attribute(value=Name(id=\'value\', ctx=Load()), attr=\'replace\', ctx=Load()), args=[Constant(value="\'"), Constant(value=\'\\\'"\\\'"\\\'\')], keywords=[]))', '.grepValue': "Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())", '.getVersion': "Name(id='_cache_getVersion', ctx=Load())", '.getVersionTuple': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getVersionMajorMinor': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=2)], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getFullVersion': "Name(id='_cache_getFullVersion', ctx=Load())", '.library_recipes': "Name(id='result', ctx=Load())", '.pkg_recipes': "Name(id='result', ctx=Load())", '.fatal': "Name(id='result', ctx=Load())", '.fileContents': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.runCommand': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.captureCommand': "Name(id='data', ctx=Load())", '.getTclTkVersion': "Name(id='l', ctx=Load())", '.checkEnvironment': "Name(id='l', ctx=Load())", '.parseOptions': "Name(id='l', ctx=Load())", '.extractArchive': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.downloadURL': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.verifyThirdPartyFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildLibraries': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPythonDocs': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPython': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchScript': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.packageFromRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.makeMpkgPlist': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildInstaller': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.installSize': "Subscript(value=Name(id='_saved', ctx=Load()), slice=Constant(value=0), ctx=Load())", '.buildDMG': "Name(id='imagepath', ctx=Load())", '.setIcon': "Name(id='imagepath', ctx=Load())", '.main': "Name(id='imagepath', ctx=Load())"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])", '.writePlist': '', '.shellQuote': 'BinOp(left=Constant(value="\'%s\'"), op=Mod(), right=Call(func=Attribute(value=Name(id=\'value\', ctx=Load()), attr=\'replace\', ctx=Load()), args=[Constant(value="\'"), Constant(value=\'\\\'"\\\'"\\\'\')], keywords=[]))', '.grepValue': "Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())", '.getVersion': "Name(id='_cache_getVersion', ctx=Load())", '.getVersionTuple': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getVersionMajorMinor': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=2)], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getFullVersion': "Name(id='_cache_getFullVersion', ctx=Load())", '.library_recipes': "Name(id='result', ctx=Load())", '.pkg_recipes': "Name(id='result', ctx=Load())", '.fatal': "Name(id='result', ctx=Load())", '.fileContents': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.runCommand': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.captureCommand': "Name(id='data', ctx=Load())", '.getTclTkVersion': "Name(id='l', ctx=Load())", '.checkEnvironment': "Name(id='l', ctx=Load())", '.parseOptions': "Name(id='l', ctx=Load())", '.extractArchive': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.downloadURL': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.verifyThirdPartyFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildLibraries': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPythonDocs': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPython': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchScript': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.packageFromRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.makeMpkgPlist': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildInstaller': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.installSize': "Subscript(value=Name(id='_saved', ctx=Load()), slice=Constant(value=0), ctx=Load())", '.buildDMG': "Name(id='imagepath', ctx=Load())", '.setIcon': "Name(id='imagepath', ctx=Load())", '.main': "Name(id='imagepath', ctx=Load())"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])", '.writePlist': '', '.shellQuote': 'BinOp(left=Constant(value="\'%s\'"), op=Mod(), right=Call(func=Attribute(value=Name(id=\'value\', ctx=Load()), attr=\'replace\', ctx=Load()), args=[Constant(value="\'"), Constant(value=\'\\\'"\\\'"\\\'\')], keywords=[]))', '.grepValue': "Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())", '.getVersion': "Name(id='_cache_getVersion', ctx=Load())", '.getVersionTuple': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getVersionMajorMinor': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=2)], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getFullVersion': "Name(id='_cache_getFullVersion', ctx=Load())", '.library_recipes': "Name(id='result', ctx=Load())", '.pkg_recipes': "Name(id='result', ctx=Load())", '.fatal': "Name(id='result', ctx=Load())", '.fileContents': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.runCommand': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.captureCommand': "Name(id='data', ctx=Load())", '.getTclTkVersion': "Name(id='l', ctx=Load())", '.checkEnvironment': "Name(id='l', ctx=Load())", '.parseOptions': "Name(id='l', ctx=Load())", '.extractArchive': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.downloadURL': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.verifyThirdPartyFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildLibraries': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPythonDocs': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPython': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchScript': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.packageFromRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.makeMpkgPlist': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildInstaller': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.installSize': "Subscript(value=Name(id='_saved', ctx=Load()), slice=Constant(value=0), ctx=Load())", '.buildDMG': "Name(id='imagepath', ctx=Load())", '.setIcon': "Name(id='imagepath', ctx=Load())", '.main': "Name(id='imagepath', ctx=Load())", '.get_installed_pythons': "Name(id='exes', ctx=Load())", 'Logger.__init__': "Name(id='exes', ctx=Load())", 'Logger.debug': "Name(id='exes', ctx=Load())", 'Logger.info': "Name(id='exes', ctx=Load())", 'Logger.notify': "Name(id='exes', ctx=Load())", 'Logger.warn': "Name(id='exes', ctx=Load())", 'Logger.error': "Name(id='exes', ctx=Load())", 'Logger.fatal': "Name(id='exes', ctx=Load())", 'Logger.log': "Name(id='exes', ctx=Load())", 'Logger.start_progress': "Name(id='exes', ctx=Load())", 'Logger.end_progress': "Name(id='exes', ctx=Load())", 'Logger.show_progress': "Name(id='exes', ctx=Load())", 'Logger.stdout_level_matches': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='level_matches', ctx=Load()), args=[Name(id='level', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stdout_level', ctx=Load()), args=[], keywords=[])], keywords=[])", 'Logger._stdout_level': "Attribute(value=Name(id='self', ctx=Load()), attr='FATAL', ctx=Load())", 'Logger.level_matches': "Compare(left=Name(id='level', ctx=Load()), ops=[GtE()], comparators=[Name(id='consumer_level', ctx=Load())])", 'Logger.level_for_integer': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.mkdir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.copyfileordir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", '.makepath': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.abs__file__': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.removeduppaths': "Name(id='known_paths', ctx=Load())", '.addbuilddir': "Name(id='known_paths', ctx=Load())", '._init_pathinfo': "Name(id='d', ctx=Load())"}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])", '.writePlist': '', '.shellQuote': 'BinOp(left=Constant(value="\'%s\'"), op=Mod(), right=Call(func=Attribute(value=Name(id=\'value\', ctx=Load()), attr=\'replace\', ctx=Load()), args=[Constant(value="\'"), Constant(value=\'\\\'"\\\'"\\\'\')], keywords=[]))', '.grepValue': "Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())", '.getVersion': "Name(id='_cache_getVersion', ctx=Load())", '.getVersionTuple': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getVersionMajorMinor': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=2)], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getFullVersion': "Name(id='_cache_getFullVersion', ctx=Load())", '.library_recipes': "Name(id='result', ctx=Load())", '.pkg_recipes': "Name(id='result', ctx=Load())", '.fatal': "Name(id='result', ctx=Load())", '.fileContents': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.runCommand': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.captureCommand': "Name(id='data', ctx=Load())", '.getTclTkVersion': "Name(id='l', ctx=Load())", '.checkEnvironment': "Name(id='l', ctx=Load())", '.parseOptions': "Name(id='l', ctx=Load())", '.extractArchive': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.downloadURL': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.verifyThirdPartyFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildLibraries': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPythonDocs': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPython': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchScript': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.packageFromRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.makeMpkgPlist': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildInstaller': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.installSize': "Subscript(value=Name(id='_saved', ctx=Load()), slice=Constant(value=0), ctx=Load())", '.buildDMG': "Name(id='imagepath', ctx=Load())", '.setIcon': "Name(id='imagepath', ctx=Load())", '.main': "Name(id='imagepath', ctx=Load())", '.get_installed_pythons': "Name(id='exes', ctx=Load())", 'Logger.__init__': "Name(id='exes', ctx=Load())", 'Logger.debug': "Name(id='exes', ctx=Load())", 'Logger.info': "Name(id='exes', ctx=Load())", 'Logger.notify': "Name(id='exes', ctx=Load())", 'Logger.warn': "Name(id='exes', ctx=Load())", 'Logger.error': "Name(id='exes', ctx=Load())", 'Logger.fatal': "Name(id='exes', ctx=Load())", 'Logger.log': "Name(id='exes', ctx=Load())", 'Logger.start_progress': "Name(id='exes', ctx=Load())", 'Logger.end_progress': "Name(id='exes', ctx=Load())", 'Logger.show_progress': "Name(id='exes', ctx=Load())", 'Logger.stdout_level_matches': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='level_matches', ctx=Load()), args=[Name(id='level', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stdout_level', ctx=Load()), args=[], keywords=[])], keywords=[])", 'Logger._stdout_level': "Attribute(value=Name(id='self', ctx=Load()), attr='FATAL', ctx=Load())", 'Logger.level_matches': "Compare(left=Name(id='level', ctx=Load()), ops=[GtE()], comparators=[Name(id='consumer_level', ctx=Load())])", 'Logger.level_for_integer': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.mkdir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.copyfileordir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", '.makepath': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.abs__file__': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.removeduppaths': "Name(id='known_paths', ctx=Load())", '.addbuilddir': "Name(id='known_paths', ctx=Load())", '._init_pathinfo': "Name(id='d', ctx=Load())", 'MakefileMaker.__init__': '', 'MakefileMaker.out': '', 'MakefileMaker.setPrefix': '', 'MakefileMaker.doProlog': '', 'MakefileMaker.addPackage': '', 'MakefileMaker.doBody': '', 'MakefileMaker.doEpilog': '', 'MakefileMaker.make': ''}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])", '.writePlist': '', '.shellQuote': 'BinOp(left=Constant(value="\'%s\'"), op=Mod(), right=Call(func=Attribute(value=Name(id=\'value\', ctx=Load()), attr=\'replace\', ctx=Load()), args=[Constant(value="\'"), Constant(value=\'\\\'"\\\'"\\\'\')], keywords=[]))', '.grepValue': "Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())", '.getVersion': "Name(id='_cache_getVersion', ctx=Load())", '.getVersionTuple': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getVersionMajorMinor': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=2)], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getFullVersion': "Name(id='_cache_getFullVersion', ctx=Load())", '.library_recipes': "Name(id='result', ctx=Load())", '.pkg_recipes': "Name(id='result', ctx=Load())", '.fatal': "Name(id='result', ctx=Load())", '.fileContents': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.runCommand': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.captureCommand': "Name(id='data', ctx=Load())", '.getTclTkVersion': "Name(id='l', ctx=Load())", '.checkEnvironment': "Name(id='l', ctx=Load())", '.parseOptions': "Name(id='l', ctx=Load())", '.extractArchive': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.downloadURL': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.verifyThirdPartyFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildLibraries': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPythonDocs': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPython': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchScript': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.packageFromRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.makeMpkgPlist': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildInstaller': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.installSize': "Subscript(value=Name(id='_saved', ctx=Load()), slice=Constant(value=0), ctx=Load())", '.buildDMG': "Name(id='imagepath', ctx=Load())", '.setIcon': "Name(id='imagepath', ctx=Load())", '.main': "Name(id='imagepath', ctx=Load())", '.get_installed_pythons': "Name(id='exes', ctx=Load())", 'Logger.__init__': "Name(id='exes', ctx=Load())", 'Logger.debug': "Name(id='exes', ctx=Load())", 'Logger.info': "Name(id='exes', ctx=Load())", 'Logger.notify': "Name(id='exes', ctx=Load())", 'Logger.warn': "Name(id='exes', ctx=Load())", 'Logger.error': "Name(id='exes', ctx=Load())", 'Logger.fatal': "Name(id='exes', ctx=Load())", 'Logger.log': "Name(id='exes', ctx=Load())", 'Logger.start_progress': "Name(id='exes', ctx=Load())", 'Logger.end_progress': "Name(id='exes', ctx=Load())", 'Logger.show_progress': "Name(id='exes', ctx=Load())", 'Logger.stdout_level_matches': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='level_matches', ctx=Load()), args=[Name(id='level', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stdout_level', ctx=Load()), args=[], keywords=[])], keywords=[])", 'Logger._stdout_level': "Attribute(value=Name(id='self', ctx=Load()), attr='FATAL', ctx=Load())", 'Logger.level_matches': "Compare(left=Name(id='level', ctx=Load()), ops=[GtE()], comparators=[Name(id='consumer_level', ctx=Load())])", 'Logger.level_for_integer': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.mkdir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.copyfileordir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", '.makepath': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.abs__file__': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.removeduppaths': "Name(id='known_paths', ctx=Load())", '.addbuilddir': "Name(id='known_paths', ctx=Load())", '._init_pathinfo': "Name(id='d', ctx=Load())", 'MakefileMaker.__init__': '', 'MakefileMaker.out': '', 'MakefileMaker.setPrefix': '', 'MakefileMaker.doProlog': '', 'MakefileMaker.addPackage': '', 'MakefileMaker.doBody': '', 'MakefileMaker.doEpilog': '', 'MakefileMaker.make': ''}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])", '.writePlist': '', '.shellQuote': 'BinOp(left=Constant(value="\'%s\'"), op=Mod(), right=Call(func=Attribute(value=Name(id=\'value\', ctx=Load()), attr=\'replace\', ctx=Load()), args=[Constant(value="\'"), Constant(value=\'\\\'"\\\'"\\\'\')], keywords=[]))', '.grepValue': "Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())", '.getVersion': "Name(id='_cache_getVersion', ctx=Load())", '.getVersionTuple': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getVersionMajorMinor': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=2)], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getFullVersion': "Name(id='_cache_getFullVersion', ctx=Load())", '.library_recipes': "Name(id='result', ctx=Load())", '.pkg_recipes': "Name(id='result', ctx=Load())", '.fatal': "Name(id='result', ctx=Load())", '.fileContents': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.runCommand': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.captureCommand': "Name(id='data', ctx=Load())", '.getTclTkVersion': "Name(id='l', ctx=Load())", '.checkEnvironment': "Name(id='l', ctx=Load())", '.parseOptions': "Name(id='l', ctx=Load())", '.extractArchive': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.downloadURL': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.verifyThirdPartyFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildLibraries': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPythonDocs': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPython': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchScript': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.packageFromRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.makeMpkgPlist': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildInstaller': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.installSize': "Subscript(value=Name(id='_saved', ctx=Load()), slice=Constant(value=0), ctx=Load())", '.buildDMG': "Name(id='imagepath', ctx=Load())", '.setIcon': "Name(id='imagepath', ctx=Load())", '.main': "Name(id='imagepath', ctx=Load())", '.get_installed_pythons': "Name(id='exes', ctx=Load())", 'Logger.__init__': "Name(id='exes', ctx=Load())", 'Logger.debug': "Name(id='exes', ctx=Load())", 'Logger.info': "Name(id='exes', ctx=Load())", 'Logger.notify': "Name(id='exes', ctx=Load())", 'Logger.warn': "Name(id='exes', ctx=Load())", 'Logger.error': "Name(id='exes', ctx=Load())", 'Logger.fatal': "Name(id='exes', ctx=Load())", 'Logger.log': "Name(id='exes', ctx=Load())", 'Logger.start_progress': "Name(id='exes', ctx=Load())", 'Logger.end_progress': "Name(id='exes', ctx=Load())", 'Logger.show_progress': "Name(id='exes', ctx=Load())", 'Logger.stdout_level_matches': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='level_matches', ctx=Load()), args=[Name(id='level', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stdout_level', ctx=Load()), args=[], keywords=[])], keywords=[])", 'Logger._stdout_level': "Attribute(value=Name(id='self', ctx=Load()), attr='FATAL', ctx=Load())", 'Logger.level_matches': "Compare(left=Name(id='level', ctx=Load()), ops=[GtE()], comparators=[Name(id='consumer_level', ctx=Load())])", 'Logger.level_for_integer': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.mkdir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.copyfileordir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", '.makepath': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.abs__file__': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.removeduppaths': "Name(id='known_paths', ctx=Load())", '.addbuilddir': "Name(id='known_paths', ctx=Load())", '._init_pathinfo': "Name(id='d', ctx=Load())", 'MakefileMaker.__init__': '', 'MakefileMaker.out': '', 'MakefileMaker.setPrefix': '', 'MakefileMaker.doProlog': '', 'MakefileMaker.addPackage': '', 'MakefileMaker.doBody': '', 'MakefileMaker.doEpilog': '', 'MakefileMaker.make': ''}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])", '.writePlist': '', '.shellQuote': 'BinOp(left=Constant(value="\'%s\'"), op=Mod(), right=Call(func=Attribute(value=Name(id=\'value\', ctx=Load()), attr=\'replace\', ctx=Load()), args=[Constant(value="\'"), Constant(value=\'\\\'"\\\'"\\\'\')], keywords=[]))', '.grepValue': "Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())", '.getVersion': "Name(id='_cache_getVersion', ctx=Load())", '.getVersionTuple': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getVersionMajorMinor': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=2)], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getFullVersion': "Name(id='_cache_getFullVersion', ctx=Load())", '.library_recipes': "Name(id='result', ctx=Load())", '.pkg_recipes': "Name(id='result', ctx=Load())", '.fatal': "Name(id='result', ctx=Load())", '.fileContents': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.runCommand': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.captureCommand': "Name(id='data', ctx=Load())", '.getTclTkVersion': "Name(id='l', ctx=Load())", '.checkEnvironment': "Name(id='l', ctx=Load())", '.parseOptions': "Name(id='l', ctx=Load())", '.extractArchive': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.downloadURL': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.verifyThirdPartyFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildLibraries': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPythonDocs': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPython': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchScript': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.packageFromRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.makeMpkgPlist': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildInstaller': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.installSize': "Subscript(value=Name(id='_saved', ctx=Load()), slice=Constant(value=0), ctx=Load())", '.buildDMG': "Name(id='imagepath', ctx=Load())", '.setIcon': "Name(id='imagepath', ctx=Load())", '.main': "Name(id='imagepath', ctx=Load())", '.get_installed_pythons': "Name(id='exes', ctx=Load())", 'Logger.__init__': "Name(id='exes', ctx=Load())", 'Logger.debug': "Name(id='exes', ctx=Load())", 'Logger.info': "Name(id='exes', ctx=Load())", 'Logger.notify': "Name(id='exes', ctx=Load())", 'Logger.warn': "Name(id='exes', ctx=Load())", 'Logger.error': "Name(id='exes', ctx=Load())", 'Logger.fatal': "Name(id='exes', ctx=Load())", 'Logger.log': "Name(id='exes', ctx=Load())", 'Logger.start_progress': "Name(id='exes', ctx=Load())", 'Logger.end_progress': "Name(id='exes', ctx=Load())", 'Logger.show_progress': "Name(id='exes', ctx=Load())", 'Logger.stdout_level_matches': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='level_matches', ctx=Load()), args=[Name(id='level', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stdout_level', ctx=Load()), args=[], keywords=[])], keywords=[])", 'Logger._stdout_level': "Attribute(value=Name(id='self', ctx=Load()), attr='FATAL', ctx=Load())", 'Logger.level_matches': "Compare(left=Name(id='level', ctx=Load()), ops=[GtE()], comparators=[Name(id='consumer_level', ctx=Load())])", 'Logger.level_for_integer': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.mkdir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.copyfileordir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", '.makepath': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.abs__file__': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.removeduppaths': "Name(id='known_paths', ctx=Load())", '.addbuilddir': "Name(id='known_paths', ctx=Load())", '._init_pathinfo': "Name(id='d', ctx=Load())", 'MakefileMaker.__init__': '', 'MakefileMaker.out': '', 'MakefileMaker.setPrefix': '', 'MakefileMaker.doProlog': '', 'MakefileMaker.addPackage': '', 'MakefileMaker.doBody': '', 'MakefileMaker.doEpilog': '', 'MakefileMaker.make': ''}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])", '.writePlist': '', '.shellQuote': 'BinOp(left=Constant(value="\'%s\'"), op=Mod(), right=Call(func=Attribute(value=Name(id=\'value\', ctx=Load()), attr=\'replace\', ctx=Load()), args=[Constant(value="\'"), Constant(value=\'\\\'"\\\'"\\\'\')], keywords=[]))', '.grepValue': "Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())", '.getVersion': "Name(id='_cache_getVersion', ctx=Load())", '.getVersionTuple': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getVersionMajorMinor': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=2)], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getFullVersion': "Name(id='_cache_getFullVersion', ctx=Load())", '.library_recipes': "Name(id='result', ctx=Load())", '.pkg_recipes': "Name(id='result', ctx=Load())", '.fatal': "Name(id='result', ctx=Load())", '.fileContents': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.runCommand': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.captureCommand': "Name(id='data', ctx=Load())", '.getTclTkVersion': "Name(id='l', ctx=Load())", '.checkEnvironment': "Name(id='l', ctx=Load())", '.parseOptions': "Name(id='l', ctx=Load())", '.extractArchive': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.downloadURL': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.verifyThirdPartyFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildLibraries': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPythonDocs': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPython': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchScript': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.packageFromRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.makeMpkgPlist': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildInstaller': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.installSize': "Subscript(value=Name(id='_saved', ctx=Load()), slice=Constant(value=0), ctx=Load())", '.buildDMG': "Name(id='imagepath', ctx=Load())", '.setIcon': "Name(id='imagepath', ctx=Load())", '.main': "Name(id='imagepath', ctx=Load())", '.get_installed_pythons': "Name(id='exes', ctx=Load())", 'Logger.__init__': "Name(id='exes', ctx=Load())", 'Logger.debug': "Name(id='exes', ctx=Load())", 'Logger.info': "Name(id='exes', ctx=Load())", 'Logger.notify': "Name(id='exes', ctx=Load())", 'Logger.warn': "Name(id='exes', ctx=Load())", 'Logger.error': "Name(id='exes', ctx=Load())", 'Logger.fatal': "Name(id='exes', ctx=Load())", 'Logger.log': "Name(id='exes', ctx=Load())", 'Logger.start_progress': "Name(id='exes', ctx=Load())", 'Logger.end_progress': "Name(id='exes', ctx=Load())", 'Logger.show_progress': "Name(id='exes', ctx=Load())", 'Logger.stdout_level_matches': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='level_matches', ctx=Load()), args=[Name(id='level', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stdout_level', ctx=Load()), args=[], keywords=[])], keywords=[])", 'Logger._stdout_level': "Attribute(value=Name(id='self', ctx=Load()), attr='FATAL', ctx=Load())", 'Logger.level_matches': "Compare(left=Name(id='level', ctx=Load()), ops=[GtE()], comparators=[Name(id='consumer_level', ctx=Load())])", 'Logger.level_for_integer': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.mkdir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.copyfileordir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", '.makepath': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.abs__file__': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.removeduppaths': "Name(id='known_paths', ctx=Load())", '.addbuilddir': "Name(id='known_paths', ctx=Load())", '._init_pathinfo': "Name(id='d', ctx=Load())", 'MakefileMaker.__init__': '', 'MakefileMaker.out': '', 'MakefileMaker.setPrefix': '', 'MakefileMaker.doProlog': '', 'MakefileMaker.addPackage': '', 'MakefileMaker.doBody': '', 'MakefileMaker.doEpilog': '', 'MakefileMaker.make': ''}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])", '.writePlist': '', '.shellQuote': 'BinOp(left=Constant(value="\'%s\'"), op=Mod(), right=Call(func=Attribute(value=Name(id=\'value\', ctx=Load()), attr=\'replace\', ctx=Load()), args=[Constant(value="\'"), Constant(value=\'\\\'"\\\'"\\\'\')], keywords=[]))', '.grepValue': "Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())", '.getVersion': "Name(id='_cache_getVersion', ctx=Load())", '.getVersionTuple': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getVersionMajorMinor': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=2)], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getFullVersion': "Name(id='_cache_getFullVersion', ctx=Load())", '.library_recipes': "Name(id='result', ctx=Load())", '.pkg_recipes': "Name(id='result', ctx=Load())", '.fatal': "Name(id='result', ctx=Load())", '.fileContents': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.runCommand': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.captureCommand': "Name(id='data', ctx=Load())", '.getTclTkVersion': "Name(id='l', ctx=Load())", '.checkEnvironment': "Name(id='l', ctx=Load())", '.parseOptions': "Name(id='l', ctx=Load())", '.extractArchive': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.downloadURL': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.verifyThirdPartyFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildLibraries': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPythonDocs': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPython': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchScript': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.packageFromRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.makeMpkgPlist': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildInstaller': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.installSize': "Subscript(value=Name(id='_saved', ctx=Load()), slice=Constant(value=0), ctx=Load())", '.buildDMG': "Name(id='imagepath', ctx=Load())", '.setIcon': "Name(id='imagepath', ctx=Load())", '.main': "Name(id='imagepath', ctx=Load())", '.get_installed_pythons': "Name(id='exes', ctx=Load())", 'Logger.__init__': "Name(id='exes', ctx=Load())", 'Logger.debug': "Name(id='exes', ctx=Load())", 'Logger.info': "Name(id='exes', ctx=Load())", 'Logger.notify': "Name(id='exes', ctx=Load())", 'Logger.warn': "Name(id='exes', ctx=Load())", 'Logger.error': "Name(id='exes', ctx=Load())", 'Logger.fatal': "Name(id='exes', ctx=Load())", 'Logger.log': "Name(id='exes', ctx=Load())", 'Logger.start_progress': "Name(id='exes', ctx=Load())", 'Logger.end_progress': "Name(id='exes', ctx=Load())", 'Logger.show_progress': "Name(id='exes', ctx=Load())", 'Logger.stdout_level_matches': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='level_matches', ctx=Load()), args=[Name(id='level', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stdout_level', ctx=Load()), args=[], keywords=[])], keywords=[])", 'Logger._stdout_level': "Attribute(value=Name(id='self', ctx=Load()), attr='FATAL', ctx=Load())", 'Logger.level_matches': "Compare(left=Name(id='level', ctx=Load()), ops=[GtE()], comparators=[Name(id='consumer_level', ctx=Load())])", 'Logger.level_for_integer': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.mkdir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.copyfileordir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", '.makepath': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.abs__file__': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.removeduppaths': "Name(id='known_paths', ctx=Load())", '.addbuilddir': "Name(id='known_paths', ctx=Load())", '._init_pathinfo': "Name(id='d', ctx=Load())", 'MakefileMaker.__init__': '', 'MakefileMaker.out': '', 'MakefileMaker.setPrefix': '', 'MakefileMaker.doProlog': '', 'MakefileMaker.addPackage': '', 'MakefileMaker.doBody': '', 'MakefileMaker.doEpilog': '', 'MakefileMaker.make': ''}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])", '.writePlist': '', '.shellQuote': 'BinOp(left=Constant(value="\'%s\'"), op=Mod(), right=Call(func=Attribute(value=Name(id=\'value\', ctx=Load()), attr=\'replace\', ctx=Load()), args=[Constant(value="\'"), Constant(value=\'\\\'"\\\'"\\\'\')], keywords=[]))', '.grepValue': "Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())", '.getVersion': "Name(id='_cache_getVersion', ctx=Load())", '.getVersionTuple': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getVersionMajorMinor': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=2)], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getFullVersion': "Name(id='_cache_getFullVersion', ctx=Load())", '.library_recipes': "Name(id='result', ctx=Load())", '.pkg_recipes': "Name(id='result', ctx=Load())", '.fatal': "Name(id='result', ctx=Load())", '.fileContents': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.runCommand': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.captureCommand': "Name(id='data', ctx=Load())", '.getTclTkVersion': "Name(id='l', ctx=Load())", '.checkEnvironment': "Name(id='l', ctx=Load())", '.parseOptions': "Name(id='l', ctx=Load())", '.extractArchive': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.downloadURL': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.verifyThirdPartyFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildLibraries': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPythonDocs': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPython': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchScript': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.packageFromRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.makeMpkgPlist': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildInstaller': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.installSize': "Subscript(value=Name(id='_saved', ctx=Load()), slice=Constant(value=0), ctx=Load())", '.buildDMG': "Name(id='imagepath', ctx=Load())", '.setIcon': "Name(id='imagepath', ctx=Load())", '.main': "Name(id='imagepath', ctx=Load())", '.get_installed_pythons': "Name(id='exes', ctx=Load())", 'Logger.__init__': "Name(id='exes', ctx=Load())", 'Logger.debug': "Name(id='exes', ctx=Load())", 'Logger.info': "Name(id='exes', ctx=Load())", 'Logger.notify': "Name(id='exes', ctx=Load())", 'Logger.warn': "Name(id='exes', ctx=Load())", 'Logger.error': "Name(id='exes', ctx=Load())", 'Logger.fatal': "Name(id='exes', ctx=Load())", 'Logger.log': "Name(id='exes', ctx=Load())", 'Logger.start_progress': "Name(id='exes', ctx=Load())", 'Logger.end_progress': "Name(id='exes', ctx=Load())", 'Logger.show_progress': "Name(id='exes', ctx=Load())", 'Logger.stdout_level_matches': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='level_matches', ctx=Load()), args=[Name(id='level', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stdout_level', ctx=Load()), args=[], keywords=[])], keywords=[])", 'Logger._stdout_level': "Attribute(value=Name(id='self', ctx=Load()), attr='FATAL', ctx=Load())", 'Logger.level_matches': "Compare(left=Name(id='level', ctx=Load()), ops=[GtE()], comparators=[Name(id='consumer_level', ctx=Load())])", 'Logger.level_for_integer': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.mkdir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.copyfileordir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", '.makepath': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.abs__file__': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.removeduppaths': "Name(id='known_paths', ctx=Load())", '.addbuilddir': "Name(id='known_paths', ctx=Load())", '._init_pathinfo': "Name(id='d', ctx=Load())", 'MakefileMaker.__init__': '', 'MakefileMaker.out': '', 'MakefileMaker.setPrefix': '', 'MakefileMaker.doProlog': '', 'MakefileMaker.addPackage': '', 'MakefileMaker.doBody': '', 'MakefileMaker.doEpilog': '', 'MakefileMaker.make': ''}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])", '.writePlist': '', '.shellQuote': 'BinOp(left=Constant(value="\'%s\'"), op=Mod(), right=Call(func=Attribute(value=Name(id=\'value\', ctx=Load()), attr=\'replace\', ctx=Load()), args=[Constant(value="\'"), Constant(value=\'\\\'"\\\'"\\\'\')], keywords=[]))', '.grepValue': "Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())", '.getVersion': "Name(id='_cache_getVersion', ctx=Load())", '.getVersionTuple': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getVersionMajorMinor': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=2)], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getFullVersion': "Name(id='_cache_getFullVersion', ctx=Load())", '.library_recipes': "Name(id='result', ctx=Load())", '.pkg_recipes': "Name(id='result', ctx=Load())", '.fatal': "Name(id='result', ctx=Load())", '.fileContents': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.runCommand': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.captureCommand': "Name(id='data', ctx=Load())", '.getTclTkVersion': "Name(id='l', ctx=Load())", '.checkEnvironment': "Name(id='l', ctx=Load())", '.parseOptions': "Name(id='l', ctx=Load())", '.extractArchive': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.downloadURL': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.verifyThirdPartyFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildLibraries': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPythonDocs': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPython': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchScript': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.packageFromRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.makeMpkgPlist': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildInstaller': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.installSize': "Subscript(value=Name(id='_saved', ctx=Load()), slice=Constant(value=0), ctx=Load())", '.buildDMG': "Name(id='imagepath', ctx=Load())", '.setIcon': "Name(id='imagepath', ctx=Load())", '.main': "Name(id='imagepath', ctx=Load())", '.get_installed_pythons': "Name(id='exes', ctx=Load())", 'Logger.__init__': "Name(id='exes', ctx=Load())", 'Logger.debug': "Name(id='exes', ctx=Load())", 'Logger.info': "Name(id='exes', ctx=Load())", 'Logger.notify': "Name(id='exes', ctx=Load())", 'Logger.warn': "Name(id='exes', ctx=Load())", 'Logger.error': "Name(id='exes', ctx=Load())", 'Logger.fatal': "Name(id='exes', ctx=Load())", 'Logger.log': "Name(id='exes', ctx=Load())", 'Logger.start_progress': "Name(id='exes', ctx=Load())", 'Logger.end_progress': "Name(id='exes', ctx=Load())", 'Logger.show_progress': "Name(id='exes', ctx=Load())", 'Logger.stdout_level_matches': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='level_matches', ctx=Load()), args=[Name(id='level', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stdout_level', ctx=Load()), args=[], keywords=[])], keywords=[])", 'Logger._stdout_level': "Attribute(value=Name(id='self', ctx=Load()), attr='FATAL', ctx=Load())", 'Logger.level_matches': "Compare(left=Name(id='level', ctx=Load()), ops=[GtE()], comparators=[Name(id='consumer_level', ctx=Load())])", 'Logger.level_for_integer': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.mkdir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.copyfileordir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", '.makepath': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.abs__file__': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.removeduppaths': "Name(id='known_paths', ctx=Load())", '.addbuilddir': "Name(id='known_paths', ctx=Load())", '._init_pathinfo': "Name(id='d', ctx=Load())", 'MakefileMaker.__init__': '', 'MakefileMaker.out': '', 'MakefileMaker.setPrefix': '', 'MakefileMaker.doProlog': '', 'MakefileMaker.addPackage': '', 'MakefileMaker.doBody': '', 'MakefileMaker.doEpilog': '', 'MakefileMaker.make': ''}
{'PythonProceduralTest.test': '', 'PythonProceduralTest.testThreading': '', 'PythonProceduralTest.testThreadingGains': '', 'UrlParseTestCase.checkRoundtrips': '', 'UrlParseTestCase.test_qsl': '', 'UrlParseTestCase._encode': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_http_roundtrips': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.checkJoin': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_unparse_parse': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC1808': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2368': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2396': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC3986': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_urljoins': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())", 'UrlParseTestCase.test_RFC2732': "Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())", 'UrlParseTestCase.test_urldefrag': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_urlsplit_attributes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_bad_port': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_attributes_without_netloc': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_noslash': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_withoutscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_portseparator': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_usingsys': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_anyscheme': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_mixed_types_rejected': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase._check_result_type': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_result_pairs': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qs_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_parse_qsl_encoding': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitnport': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitquery': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_splitvalue': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'UrlParseTestCase.test_to_bytes': "Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[], is_async=0)])], keywords=[])", 'Trivial.__str__': "Constant(value='trivial')", 'UrlParseTestCase.test_urlencode_sequences': "Constant(value='trivial')", 'Trivial.test_quote_from_bytes': "Constant(value='trivial')", 'Trivial.test_unquote_to_bytes': "Constant(value='trivial')", 'Trivial.test_quote_errors': "Constant(value='trivial')", 'Trivial.test_issue14072': "Constant(value='trivial')", 'Trivial.test_telurl_params': "Constant(value='trivial')", 'Trivial.test_unwrap': "Constant(value='trivial')", 'Trivial.test_Quoter_repr': "Constant(value='trivial')", 'Trivial.test_main': "Constant(value='trivial')", '.CreateFromDocument': "Name(id='instance', ctx=Load())", '.CreateFromDOM': "Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pyxb', ctx=Load()), attr='binding', ctx=Load()), attr='basis', ctx=Load()), attr='element', ctx=Load()), attr='AnyCreateFromDOM', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='default_namespace', ctx=Load())], keywords=[])", 'RSAKeyValueType._BuildAutomaton': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_2': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_3': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_4': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_5': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_6': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_7': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_8': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_9': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_10': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_11': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_12': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_13': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_14': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_15': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=True)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_16': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_17': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_18': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_19': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", 'RSAKeyValueType._BuildAutomaton_20': "Call(func=Attribute(value=Name(id='fac', ctx=Load()), attr='Automaton', ctx=Load()), args=[Name(id='states', ctx=Load()), Name(id='counters', ctx=Load()), Constant(value=False)], keywords=[keyword(arg='containing_state', value=Constant(value=None))])", '.heappush': '', '.heappop': "Name(id='lastelt', ctx=Load())", '.heapreplace': "Name(id='returnitem', ctx=Load())", '.heappushpop': "Name(id='item', ctx=Load())", '.heapify': "Name(id='item', ctx=Load())", '._heappop_max': "Name(id='lastelt', ctx=Load())", '._heapreplace_max': "Name(id='returnitem', ctx=Load())", '._heapify_max': "Name(id='returnitem', ctx=Load())", '._siftdown': "Name(id='returnitem', ctx=Load())", '._siftup': "Name(id='returnitem', ctx=Load())", '._siftdown_max': "Name(id='returnitem', ctx=Load())", '._siftup_max': "Name(id='returnitem', ctx=Load())", 'QueryTestCase.test_db_selection': '', 'QueryTestCase.test_default_creation': '', 'QueryTestCase.test_other_creation': '', 'QueryTestCase.test_basic_queries': '', 'QueryTestCase.test_m2m_separation': '', 'QueryTestCase.test_m2m_forward_operations': '', 'QueryTestCase.test_m2m_reverse_operations': '', 'QueryTestCase.test_m2m_cross_database_protection': '', 'QueryTestCase.test_m2m_deletion': '', 'QueryTestCase.test_foreign_key_separation': '', 'QueryTestCase.test_foreign_key_reverse_operations': '', 'QueryTestCase.test_foreign_key_cross_database_protection': '', 'QueryTestCase.test_foreign_key_deletion': '', 'QueryTestCase.test_foreign_key_validation': '', 'QueryTestCase.test_o2o_separation': '', 'QueryTestCase.test_o2o_cross_database_protection': '', 'QueryTestCase.test_generic_key_separation': '', 'QueryTestCase.test_generic_key_reverse_operations': '', 'QueryTestCase.test_generic_key_cross_database_protection': '', 'QueryTestCase.test_generic_key_deletion': '', 'QueryTestCase.test_ordering': '', 'QueryTestCase.test_raw': '', 'QueryTestCase.test_select_related': '', 'QueryTestCase.test_subquery': '', 'QueryTestCase.test_related_manager': '', 'ConnectionRouterTestCase.test_router_init_default': '', 'ConnectionRouterTestCase.test_router_init_arg': '', 'RouterTestCase.setUp': '', 'RouterTestCase.tearDown': '', 'RouterTestCase.test_db_selection': '', 'RouterTestCase.test_migrate_selection': '', 'RouterTestCase.test_partial_router': '', 'RouterTestCase.test_database_routing': '', 'RouterTestCase.test_foreign_key_cross_database_protection': '', 'RouterTestCase.test_m2m_cross_database_protection': '', 'RouterTestCase.test_o2o_cross_database_protection': '', 'RouterTestCase.test_generic_key_cross_database_protection': '', 'RouterTestCase.test_m2m_managers': '', 'RouterTestCase.test_foreign_key_managers': '', 'RouterTestCase.test_generic_key_managers': '', 'RouterTestCase.test_subquery': '', 'RouterTestCase.test_deferred_models': '', 'AuthTestCase.setUp': '', 'AuthTestCase.tearDown': '', 'AuthTestCase.test_auth_manager': '', 'AuthTestCase.test_dumpdata': '', 'AntiPetRouter.allow_migrate': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.setUp': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.tearDown': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_fixture_loading': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'FixtureTestCase.test_pseudo_empty_fixtures': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'PickleQuerySetTestCase.test_pickling': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'DatabaseReceiver.__call__': "Compare(left=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='object_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Pet')])", 'WriteToOtherRouter.db_for_write': "Constant(value='other')", 'SignalTests.setUp': "Constant(value='other')", 'SignalTests.tearDown': "Constant(value='other')", 'SignalTests._write_to_other': "Constant(value='other')", 'SignalTests._write_to_default': "Constant(value='other')", 'SignalTests.test_database_arg_save_and_delete': "Constant(value='other')", 'SignalTests.test_database_arg_m2m': "Constant(value='other')", 'AttributeErrorRouter.db_for_read': "Constant(value='other')", 'AttributeErrorRouter.db_for_write': "Constant(value='other')", 'RouterAttributeErrorTestCase.setUp': "Constant(value='other')", 'RouterAttributeErrorTestCase.tearDown': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_read': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_save': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_delete': "Constant(value='other')", 'RouterAttributeErrorTestCase.test_attribute_error_m2m': "Constant(value='other')", 'ModelMetaRouter.db_for_write': "Constant(value='other')", 'RouterModelArgumentTestCase.setUp': "Constant(value='other')", 'RouterModelArgumentTestCase.tearDown': "Constant(value='other')", 'RouterModelArgumentTestCase.test_m2m_collection': "Constant(value='other')", 'RouterModelArgumentTestCase.test_foreignkey_collection': "Constant(value='other')", 'SyncOnlyDefaultDatabaseRouter.allow_migrate': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'MigrateTestCase.test_migrate_to_other_database_with_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'RouterUsed.__init__': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.db_for_write': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.setUp': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.tearDown': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.enable_router': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_fk_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_add': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_clear': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_delete': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_get_or_create': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_remove': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", 'WriteCheckRouter.test_reverse_m2m_update': "Compare(left=Name(id='db', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_DB_ALIAS', ctx=Load())])", '.decorator_apply': "Call(func=Attribute(value=Name(id='FunctionMaker', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='return decorated(%(signature)s)'), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='decorated', value=Call(func=Name(id='dec', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))])], keywords=[keyword(arg='__wrapped__', value=Name(id='func', ctx=Load()))])", '._trace': "Call(func=Name(id='f', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", '.trace': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_trace', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", '.on_success': "Name(id='result', ctx=Load())", '.on_failure': "Name(id='result', ctx=Load())", '.on_closing': "Name(id='result', ctx=Load())", 'Async.__init__': "Name(id='result', ctx=Load())", 'Async.func_wrapper': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_success', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])", 'Async.__call__': "Name(id='thread', ctx=Load())", 'Async.wrapper': "Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])", 'Async.identity_dec': "Name(id='wrapper', ctx=Load())", 'Async.example': "Name(id='wrapper', ctx=Load())", 'Async.memoize': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.memoize_uw': "Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), args=[Name(id='memoize', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'Async._memoize': "Name(id='result', ctx=Load())", 'Async.set_result': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='_memoize', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])", 'Async.blocking': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='blocking', ctx=Load())], keywords=[])", 'Admin.get_userclass': "Name(id='User', ctx=Load())", 'PermissionError.restricted': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.view': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.insert': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'Action.delete': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__init__': "Call(func=Name(id='decorator', ctx=Load()), args=[Name(id='restricted', ctx=Load())], keywords=[])", 'TailRecursive.__call__': "Name(id='CONTINUE', ctx=Load())", 'TailRecursive.tail_recursive': "Call(func=Name(id='decorator_apply', ctx=Load()), args=[Name(id='TailRecursive', ctx=Load()), Name(id='func', ctx=Load())], keywords=[])", 'TailRecursive.factorial': "Call(func=Name(id='factorial', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Name(id='acc', ctx=Load()))], keywords=[])", 'TailRecursive.fact': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.a_test_for_pylons': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlydefaults': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonlyargs': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_no_args': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.test_kwonly_star_notation': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.before_after': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'TailRecursive.hello': "BinOp(left=Name(id='n', ctx=Load()), op=Mult(), right=Call(func=Name(id='fact', ctx=Load()), args=[BinOp(left=Name(id='n', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))", 'NetworkedNNTPTestsMixin.test_welcome': '', 'NetworkedNNTPTestsMixin.test_help': '', 'NetworkedNNTPTestsMixin.test_list': '', 'NetworkedNNTPTestsMixin.test_list_active': '', 'NetworkedNNTPTestsMixin.test_unknown_command': '', 'NetworkedNNTPTestsMixin.test_newgroups': '', 'NetworkedNNTPTestsMixin._check_desc': '', 'NetworkedNNTPTestsMixin.test_description': '', 'NetworkedNNTPTestsMixin.test_descriptions': '', 'NetworkedNNTPTestsMixin.test_group': '', 'NetworkedNNTPTestsMixin.test_date': '', 'NetworkedNNTPTestsMixin._check_art_dict': '', 'NetworkedNNTPTestsMixin.test_xover': '', 'NetworkedNNTPTestsMixin.test_over': '', 'NetworkedNNTPTestsMixin.test_xhdr': '', 'NetworkedNNTPTestsMixin.check_article_resp': '', 'NetworkedNNTPTestsMixin.test_article_head_body': '', 'NetworkedNNTPTestsMixin._check_caps': '', 'NetworkedNNTPTestsMixin.test_capabilities': '', 'NetworkedNNTPTestsMixin.test_starttls': '', 'NetworkedNNTPTestsMixin.test_zlogin': '', 'NetworkedNNTPTestsMixin.test_zzquit': '', 'NetworkedNNTPTestsMixin.wrapped': '', 'NetworkedNNTPTestsMixin.wrap_meth': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTestsMixin.wrap_methods': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.setUpClass': "Name(id='wrapped', ctx=Load())", 'NetworkedNNTPTests.tearDownClass': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.__init__': "Name(id='wrapped', ctx=Load())", '_NNTPServerIO.readable': 'Constant(value=True)', '_NNTPServerIO.writable': 'Constant(value=True)', '_NNTPServerIO.push_data': 'Constant(value=True)', '_NNTPServerIO.write': "Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])", '_NNTPServerIO.readinto': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.setUp': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.tearDown': "Name(id='n', ctx=Load())", 'MockedNNTPTestsMixin.make_server': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'MockedNNTPWithReaderModeMixin.setUp': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler.start': "Attribute(value=Name(id='self', ctx=Load()), attr='server', ctx=Load())", 'NNTPv1Handler._decode': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogateescape')], keywords=[])", '.icemem48gbq': "Constant(value='\\n# Params for icemem48gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=44gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icemem72gbq': "Constant(value='\\n# Params for icemem72gbq\\n#PBS -l select=1:ncpus=12:mpiprocs=1:mem=68gb\\n#PBS -l walltime=23:59:00\\nNP=1\\n')", '.icepar156q': "Constant(value='\\n## Params for icepar156q\\n#PBS -l select=12:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=03:59:59\\nNP=48\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.icetestq': "Constant(value='\\n# Params for icetestq\\n#PBS -l select=4:ncpus=12:mpiprocs=4:mem=24000000kb\\n#PBS -l walltime=00:19:59\\nNP=16\\n\\nexport MPI_OPENMP_INTEROP=1\\nexport OMP_NUM_THREADS=12\\nexport MPI_DSM_CPULIST=0,3,6,9:allhosts\\n#export MPI_DSM_VERBOSE=1\\n')", '.set_jobname': "Constant(value='\\n# name of the job\\n#PBS -N learnbatch\\n')", '.output': "Call(func=Attribute(value=Constant(value='\\n# output\\n#PBS -o log_{}.txt\\n'), attr='format', ctx=Load()), args=[Name(id='job_name', ctx=Load())], keywords=[])", '.folder': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", '.make_job': "Constant(value='\\ncd $HOME/segmentation-svm/\\n')", 'ArgumentDescriptor.__init__': '', 'ArgumentDescriptor.read_uint1': "Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_uint2': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<H'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_int4': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='<i'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_stringnl': "Name(id='data', ctx=Load())", 'ArgumentDescriptor.read_stringnl_noescape': "Call(func=Name(id='read_stringnl', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='stripquotes', value=Constant(value=False))])", 'ArgumentDescriptor.read_stringnl_noescape_pair': "BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), Call(func=Name(id='read_stringnl_noescape', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], ctx=Load()))", 'ArgumentDescriptor.read_string4': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_string1': "Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])", 'ArgumentDescriptor.read_unicodestringnl': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='raw-unicode-escape')], keywords=[])", 'ArgumentDescriptor.read_unicodestring4': "Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])", 'ArgumentDescriptor.read_decimalnl_short': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_decimalnl_long': "Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_floatnl': "Call(func=Name(id='float', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_float8': "Subscript(value=Call(func=Name(id='_unpack', ctx=Load()), args=[Constant(value='>d'), Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())", 'ArgumentDescriptor.read_long1': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'ArgumentDescriptor.read_long4': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__init__': "Call(func=Name(id='decode_long', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])", 'StackObject.__repr__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.__init__': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.assure_pickle_consistency': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.genops': "Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())", 'OpcodeInfo.optimize': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", 'OpcodeInfo.dis': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example.__init__': "Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])", '_Example._test': "Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='testmod', ctx=Load()), args=[], keywords=[])", '.writePlist': '', '.shellQuote': 'BinOp(left=Constant(value="\'%s\'"), op=Mod(), right=Call(func=Attribute(value=Name(id=\'value\', ctx=Load()), attr=\'replace\', ctx=Load()), args=[Constant(value="\'"), Constant(value=\'\\\'"\\\'"\\\'\')], keywords=[]))', '.grepValue': "Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())", '.getVersion': "Name(id='_cache_getVersion', ctx=Load())", '.getVersionTuple': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getVersionMajorMinor': "Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='getVersion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=2)], keywords=[]), ifs=[], is_async=0)])], keywords=[])", '.getFullVersion': "Name(id='_cache_getFullVersion', ctx=Load())", '.library_recipes': "Name(id='result', ctx=Load())", '.pkg_recipes': "Name(id='result', ctx=Load())", '.fatal': "Name(id='result', ctx=Load())", '.fileContents': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.runCommand': "Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='r')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])", '.captureCommand': "Name(id='data', ctx=Load())", '.getTclTkVersion': "Name(id='l', ctx=Load())", '.checkEnvironment': "Name(id='l', ctx=Load())", '.parseOptions': "Name(id='l', ctx=Load())", '.extractArchive': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.downloadURL': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.verifyThirdPartyFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildLibraries': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPythonDocs': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildPython': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchFile': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.patchScript': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.packageFromRecipe': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.makeMpkgPlist': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.buildInstaller': "Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='builddir', ctx=Load()), Name(id='retval', ctx=Load())], keywords=[])", '.installSize': "Subscript(value=Name(id='_saved', ctx=Load()), slice=Constant(value=0), ctx=Load())", '.buildDMG': "Name(id='imagepath', ctx=Load())", '.setIcon': "Name(id='imagepath', ctx=Load())", '.main': "Name(id='imagepath', ctx=Load())", '.get_installed_pythons': "Name(id='exes', ctx=Load())", 'Logger.__init__': "Name(id='exes', ctx=Load())", 'Logger.debug': "Name(id='exes', ctx=Load())", 'Logger.info': "Name(id='exes', ctx=Load())", 'Logger.notify': "Name(id='exes', ctx=Load())", 'Logger.warn': "Name(id='exes', ctx=Load())", 'Logger.error': "Name(id='exes', ctx=Load())", 'Logger.fatal': "Name(id='exes', ctx=Load())", 'Logger.log': "Name(id='exes', ctx=Load())", 'Logger.start_progress': "Name(id='exes', ctx=Load())", 'Logger.end_progress': "Name(id='exes', ctx=Load())", 'Logger.show_progress': "Name(id='exes', ctx=Load())", 'Logger.stdout_level_matches': "Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='level_matches', ctx=Load()), args=[Name(id='level', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stdout_level', ctx=Load()), args=[], keywords=[])], keywords=[])", 'Logger._stdout_level': "Attribute(value=Name(id='self', ctx=Load()), attr='FATAL', ctx=Load())", 'Logger.level_matches': "Compare(left=Name(id='level', ctx=Load()), ops=[GtE()], comparators=[Name(id='consumer_level', ctx=Load())])", 'Logger.level_for_integer': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.mkdir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", 'Logger.copyfileordir': "Subscript(value=Name(id='levels', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Load())", '.makepath': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.abs__file__': "Tuple(elts=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])], ctx=Load())", '.removeduppaths': "Name(id='known_paths', ctx=Load())", '.addbuilddir': "Name(id='known_paths', ctx=Load())", '._init_pathinfo': "Name(id='d', ctx=Load())", 'MakefileMaker.__init__': '', 'MakefileMaker.out': '', 'MakefileMaker.setPrefix': '', 'MakefileMaker.doProlog': '', 'MakefileMaker.addPackage': '', 'MakefileMaker.doBody': '', 'MakefileMaker.doEpilog': '', 'MakefileMaker.make': ''}
